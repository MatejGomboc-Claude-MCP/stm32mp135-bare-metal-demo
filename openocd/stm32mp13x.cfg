# STM32MP13x target configuration
# Based on ARM Cortex-A7 core

# Create the DAP (Debug Access Port)
if { [info exists CHIPNAME] } {
    set _CHIPNAME $CHIPNAME
} else {
    set _CHIPNAME stm32mp13x
}

if { [info exists CPUTAPID] } {
    set _CPUTAPID $CPUTAPID
} else {
    # STM32MP13x Cortex-A7 JTAG ID
    set _CPUTAPID 0x6ba00477
}

# Create the CPU target
hla newtap $_CHIPNAME cpu -expected-id $_CPUTAPID

# Target configuration
set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME cortex_a -dap $_CHIPNAME.dap

# Work area in SYSRAM (optional, speeds up programming)
$_TARGETNAME configure -work-area-phys 0x2FFC0000 -work-area-size 0x10000

# Initialize after reset
$_TARGETNAME configure -event reset-init {
    echo "STM32MP13x: Initializing after reset..."
    
    # Disable MMU and caches
    # Read SCTLR (System Control Register)
    set SCTLR [arm mrc 15 0 1 0 0]
    # Clear M (bit 0) - MMU
    # Clear C (bit 2) - D-cache  
    # Clear I (bit 12) - I-cache
    set SCTLR [expr {$SCTLR & ~0x1005}]
    arm mcr 15 0 1 0 0 $SCTLR
    
    # Ensure all CP15 operations complete
    arm mcr 15 0 7 5 4 0
}

# Halt after reset
$_TARGETNAME configure -event reset-start {
    echo "STM32MP13x: Reset detected"
}

$_TARGETNAME configure -event halted {
    echo "STM32MP13x: Core halted"
}

# Examine the target
$_TARGETNAME configure -event examine-end {
    echo "STM32MP13x: Target examined"
    echo "CPU is Cortex-A7 r0p5"
}

# Default to halt after reset
$_TARGETNAME configure -event reset-halt {
    echo "STM32MP13x: Halted after reset"
}

# GDB configuration
$_TARGETNAME configure -event gdb-attach {
    echo "GDB attached to STM32MP13x"
    halt
}

# Initialize the debug system
init
